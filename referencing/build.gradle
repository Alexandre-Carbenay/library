plugins {
	id 'java'
	id 'net.ltgt.errorprone' version '4.3.0'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.avast.gradle.docker-compose' version '0.17.12'
}

group = 'org.adhuc.library'
version = '1'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

sourceSets {
	acceptance {
		java {
			srcDir file('src/acceptance/java')
		}
	}
}

configurations {
	acceptanceTestCompile.extendsFrom testCompile
	acceptanceTestRuntime.extendsFrom testRuntime
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.modulith:spring-modulith-bom:1.4.3'
		mavenBom 'org.jmolecules:jmolecules-bom:2023.3.3'
	}
}

dependencies {
	implementation 'org.jspecify:jspecify:1.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.data:spring-data-rest-webmvc'
	implementation 'org.springframework.modulith:spring-modulith-starter-core'
	implementation 'org.springframework.modulith:spring-modulith-starter-insight'
	implementation 'org.jmolecules:jmolecules-ddd'
	implementation 'org.jmolecules:jmolecules-onion-architecture'
	implementation 'com.atlassian.oai:swagger-request-validator-spring-webmvc:2.45.1'
	implementation('commons-validator:commons-validator:1.10.0') {
		exclude group: 'commons-collections', module: 'commons-collections'
	}
	implementation 'io.micrometer:micrometer-tracing'

	runtimeOnly 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
	runtimeOnly 'io.micrometer:micrometer-tracing-bridge-otel'
	runtimeOnly 'io.opentelemetry:opentelemetry-exporter-zipkin'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
	testImplementation 'org.jmolecules.integrations:jmolecules-archunit'
	testImplementation 'com.tngtech.archunit:archunit-junit5:1.4.1'
	testImplementation 'net.datafaker:datafaker:2.4.4'
	testImplementation 'au.com.dius.pact.provider:junit5:4.6.17'

	acceptanceImplementation platform('io.cucumber:cucumber-bom:7.23.0')
	acceptanceImplementation 'io.cucumber:cucumber-java'
	acceptanceImplementation 'io.cucumber:cucumber-junit-platform-engine'
	acceptanceImplementation 'org.junit.platform:junit-platform-suite'
	acceptanceImplementation 'io.rest-assured:rest-assured'
	acceptanceImplementation 'org.assertj:assertj-core'
	acceptanceImplementation 'com.fasterxml.jackson.core:jackson-annotations'
	acceptanceImplementation 'com.fasterxml.jackson.core:jackson-databind'

	errorprone 'com.google.errorprone:error_prone_core:2.41.0'
	errorprone 'com.uber.nullaway:nullaway:0.12.10'
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs.add('--enable-preview')
	options.compilerArgs.add('-parameters')

	options.errorprone {
		disableAllChecks = true
		option("NullAway:OnlyNullMarked", "true")
		error("NullAway")
	}
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	jvmArgs += '--enable-preview'
	testLogging {
		events "failed", "skipped", "standardError"
		showExceptions true
		showStackTraces true
		exceptionFormat "full"
		showCauses true
		showStandardStreams false
	}
}

task acceptance(type: Test) {
	testClassesDirs = sourceSets.acceptance.output.classesDirs
	classpath = sourceSets.acceptance.runtimeClasspath
	doFirst { dockerCompose.exposeAsSystemProperties(acceptance) }
	// Work around. Gradle does not include enough information to disambiguate
	// between different examples and scenarios.
	systemProperty("cucumber.junit-platform.naming-strategy", "long")
	testLogging {
		showStandardStreams true
	}
}
dockerCompose.isRequiredBy(acceptance)

dockerCompose {
	useComposeFiles = ['docker/docker-compose.yml']
	environment.put 'SERVICES_HOST', '0.0.0.0'
}
