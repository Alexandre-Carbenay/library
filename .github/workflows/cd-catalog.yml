name: Continuous Delivery pipeline for Catalog
on:
  push:
    branches:
      - 'main'
    paths:
      - 'catalog/**'
      - '.github/workflows/cd-catalog.yml'
      - '!**/README.md'
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - 'main'
    paths:
      - 'catalog/**'
      - '.github/workflows/cd-catalog.yml'
      - '!**/README.md'
  workflow_dispatch:

env:
  docker-registry: 'ghcr.io'
  github-repository: 'alexandre-carbenay/library'
  docker-image: 'catalog'

jobs:
  build:
    name: '📦 Build'
    runs-on: [ubuntu-latest]
    permissions:
      pull-requests: write
      packages: write
    steps:
      - name: "📥 Checkout project sources"
        uses: actions/checkout@v4

      - name: "🐘 🧪 Gradle Wrapper Validation Action"
        uses: gradle/wrapper-validation-action@v3

      - name: "🐳 🔍 Hadolint Dockerfile Scan"
        uses: hadolint/hadolint-action@v3.1.0
        id: hadolint
        continue-on-error: true
        with:
          dockerfile: catalog/Dockerfile
          verbose: true
          failure-threshold: info

      - name: "🐳 📒 Comment PR with Hadolint results"
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: "☕ 🛠️ Set up JDK 21"
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: "🐘 🛠️ Setup Gradle"
        uses: gradle/actions/setup-gradle@v4

      - name: "🐘 🔨 Compile with Gradle"
        working-directory: ./catalog
        run: make build-catalog-compile
        timeout-minutes: 1

      - name: "🐘 🧪 Test with Gradle"
        working-directory: ./catalog
        run: make build-catalog-test
        timeout-minutes: 2

      - name: "🧪 📒 Publish Tests Report"
        working-directory: ./catalog
        run: make build-catalog-test-publish
        timeout-minutes: 1

      - name: "🐘 📦 Build artifact with Gradle"
        working-directory: ./catalog
        run: make build-catalog-jar
        timeout-minutes: 1

      - name: "🐘 🧩 Extract application version"
        id: app_version
        working-directory: ./catalog
        run: |
          version=$(./gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk '{printf $2}')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: "🕑 Extract creation date"
        id: creation_date
        shell: bash
        run: |
          date=$(date --utc --iso-8601=seconds)
          echo "date=$date" >> $GITHUB_OUTPUT

      - name: "🐳 🔓 Log in to the Container registry"
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐳 📦 🚀 Build and publish artifact with Docker (PR)"
        uses: docker/build-push-action@v5
        if: github.ref != 'refs/heads/main' && github.event_name == 'pull_request'
        timeout-minutes: 1
        with:
          context: ./catalog
          platforms: linux/amd64
          push: true
          build-args: |
            CREATED=${{ steps.creation_date.outputs.date }}
            VERSION=${{ steps.app_version.outputs.version }}
            REVISION=${{ github.head_ref }}-${{ github.run_number }}
          tags: |
            ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:pr-${{ github.event.pull_request.number }}
            ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:sha-${{ github.sha }}

      - name: "🐳 📦 🚀 Build and publish artifact with Docker (main)"
        uses: docker/build-push-action@v5
        if: github.ref == 'refs/heads/main'
        timeout-minutes: 1
        with:
          context: ./catalog
          platforms: linux/amd64
          push: true
          build-args: |
            CREATED=${{ steps.creation_date.outputs.date }}
            VERSION=${{ steps.app_version.outputs.version }}
            REVISION=${{ github.ref_name }}-${{ github.run_number }}
          tags: |
            ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:sha-${{ github.sha }}
            ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:${{ github.ref_name }}-${{ github.run_number }}

  acceptance:
    name: '🧪 Acceptance tests'
    runs-on: [ ubuntu-latest ]
    needs: [ build ]
    permissions:
      pull-requests: write
    steps:
      - name: "📥 Checkout project sources"
        uses: actions/checkout@v4

      - name: "☕ 🛠️ Set up JDK 21"
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: "🐘 🛠️ Setup Gradle"
        uses: gradle/actions/setup-gradle@v4

      - name: "🐳 🔓 Log in to the Container registry"
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐳 📦 📥 Pull Docker image to run acceptance tests"
        run: |
          docker pull ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:sha-${{ github.sha }}
          docker tag ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:sha-${{ github.sha }} ${{ env.docker-image }}:latest

      - name: "🐘 📦 🧪 Run acceptance tests"
        id: acceptance
        working-directory: ./catalog
        run: |
          make acceptance | tee acceptance.log
          result_code=${PIPESTATUS[0]}
          # Retrieve the cucumber report URL from acceptance execution logs, remove the color characters, extract the URL only
          echo "report_url=$(sed '/View your Cucumber Report at:/{n; p}' acceptance.log | sed -e 's/\x1b\[[0-9;]*m//g' | grep -o 'http[s]\?://[^ ]\+' | head -1)" >> $GITHUB_OUTPUT
          exit $result_code
        timeout-minutes: 5

      - name: "🧪 📦 📒 Publish acceptance tests Report"
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const { REPORTS_BASE_URL, GCS_REPORTS_PATH } = process.env
            const output = `
            #### Acceptance tests \`${{ steps.acceptance.outcome }}\`
            ${{ steps.acceptance.outputs.report_url }}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  release:
    name: '🚀 Release'
    runs-on: [ ubuntu-latest ]
    needs: [ acceptance ]
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - name: "🐳 🔓 Log in to the Container registry"
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐳 📦 📥 Pull Docker image to release"
        run: |
          docker pull ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:sha-${{ github.sha }}

      - name: "🐳 📦 🚀 Push Docker image with release tag"
        run: |
          docker tag ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:sha-${{ github.sha }} ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:latest
          docker push ${{ env.docker-registry }}/${{ env.github-repository }}/${{ env.docker-image }}:latest
