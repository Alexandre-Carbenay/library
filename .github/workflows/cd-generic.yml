name: Continuous Delivery pipeline for Library app
on:
  workflow_call:
    inputs:
      docker-registry:
        required: false
        type: string
        default: 'ghcr.io'
      github-repository:
        required: false
        type: string
        default: 'alexandre-carbenay/library'
      app-name:
        required: true
        type: string
      working-directory:
        required: true
        type: string
      github-package:
        required: true
        type: string
      docker-image:
        required: true
        type: string
      publish-pacts:
        required: false
        type: boolean
        default: false
      run-acceptance:
        required: false
        type: boolean
        default: true

jobs:
  build:
    name: '📦 Build'
    runs-on: [ubuntu-latest]
    permissions:
      id-token: write
      pull-requests: write
      packages: write
      contents: write
    concurrency:
      group: "${{ github.workflow }}-${{ github.ref }}"
      cancel-in-progress: true
    steps:
      - name: "📥 Checkout project sources"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}

      - name: "🐘 🧪 Gradle Wrapper Validation Action"
        uses: gradle/actions/wrapper-validation@v5

      - name: "🐳 🔍 Hadolint Dockerfile Scan"
        uses: hadolint/hadolint-action@v3.3.0
        id: hadolint
        continue-on-error: true
        with:
          dockerfile: ${{ inputs.working-directory }}/Dockerfile
          verbose: true
          failure-threshold: info

      - name: "🐳 📒 Comment PR with Hadolint results"
        uses: actions/github-script@v8
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: "☕ 🛠️ Set up JDK 21"
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: "🐘 🛠️ Setup Gradle"
        uses: gradle/actions/setup-gradle@v5

      - name: "🐘 🔨 Compile with Gradle"
        working-directory: ${{ inputs.working-directory }}
        run: make build-compile
        timeout-minutes: 1

      - name: "🐘 🧪 Test with Gradle"
        working-directory: ${{ inputs.working-directory }}
        run: make build-test
        timeout-minutes: 2

      - name: "🧪 📒 Publish Tests Report"
        working-directory: ${{ inputs.working-directory }}
        run: make build-test-publish
        timeout-minutes: 1

      - name: "🐘 📦 Build artifact with Gradle"
        working-directory: ${{ inputs.working-directory }}
        run: make build-jar
        timeout-minutes: 1

      - name: "🔗 📂 Check for Pacts changes to commit"
        id: check-pacts
        if: inputs.publish-pacts
        working-directory: ${{ inputs.working-directory }}
        run: |
          if git status --porcelain; then
            echo "PACTS_CHANGED=true" >> $GITHUB_OUTPUT
          else
            echo "PACTS_CHANGED=false" >> $GITHUB_OUTPUT
          fi

      - name: "🔗 📤 Commit and push Pacts"
        if: inputs.publish-pacts && steps.check-pacts.outputs.PACTS_CHANGED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v7
        with:
          commit_message: "doc: Update library ${{ inputs.app-name }} pacts [skip actions]"

      - name: "🐘 🧩 Extract application version"
        id: app_version
        working-directory: ${{ inputs.working-directory }}
        run: |
          version=$(./gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk '{printf $2}')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: "🕑 Extract creation date"
        id: creation_date
        shell: bash
        run: |
          date=$(date --utc --iso-8601=seconds)
          echo "date=$date" >> $GITHUB_OUTPUT

      - name: "🐳 🔓 Log in to the Container registry"
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐳 📦 🧹 Remove previous artifact from Docker registry (PR)"
        if: github.ref != 'refs/heads/main' && github.event_name == 'pull_request'
        run: |
          package=$(gh api /user/packages?package_type=container | jq -r '.[] | select(.name == "library/${{ inputs.app-name }}") | .name')
          if [ ${package} != "" ]
          then
            version=$(gh api /user/packages/container/${{ inputs.github-package }}/versions | jq -r '.[] | select(.metadata.container.tags[] | contains("${{ env.tag }}")) | .id')
            if [ "${version}" != "" ]
            then
              echo "Deleting version ${version} from package ${package}"
              echo -n | gh api --method DELETE /user/packages/container/${{ inputs.github-package }}/versions/${version} --input -
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_CLASSICAL_PAT }}
          tag: pr-${{ github.event.pull_request.number }}

      - name: "🐳 📦 🚀 Build and publish artifact with Docker (PR)"
        uses: docker/build-push-action@v6
        if: github.ref != 'refs/heads/main' && github.event_name == 'pull_request'
        timeout-minutes: 1
        with:
          context: ${{ inputs.working-directory }}
          platforms: linux/amd64
          push: true
          build-args: |
            CREATED=${{ steps.creation_date.outputs.date }}
            VERSION=${{ steps.app_version.outputs.version }}
            REVISION=${{ github.head_ref }}-${{ github.run_number }}
          tags: |
            ${{ inputs.docker-registry }}/${{ inputs.github-repository }}/${{ inputs.docker-image }}:pr-${{ github.event.pull_request.number }}
            ${{ inputs.docker-registry }}/${{ inputs.github-repository }}/${{ inputs.docker-image }}:sha-${{ github.sha }}

      - name: "🐳 📦 🚀 Build and publish artifact with Docker (main)"
        uses: docker/build-push-action@v6
        if: github.ref == 'refs/heads/main'
        timeout-minutes: 1
        with:
          context: ${{ inputs.working-directory }}
          platforms: linux/amd64
          push: true
          build-args: |
            CREATED=${{ steps.creation_date.outputs.date }}
            VERSION=${{ steps.app_version.outputs.version }}
            REVISION=${{ github.ref_name }}-${{ github.run_number }}
          tags: |
            ${{ inputs.docker-registry }}/${{ inputs.github-repository }}/${{ inputs.docker-image }}:sha-${{ github.sha }}
            ${{ inputs.docker-registry }}/${{ inputs.github-repository }}/${{ inputs.docker-image }}:${{ github.ref_name }}-${{ github.run_number }}

  acceptance:
    name: '🧪 Acceptance tests'
    runs-on: [ ubuntu-latest ]
    needs: [ build ]
    if: inputs.run-acceptance
    permissions:
      id-token: write
      pull-requests: write
    steps:
      - name: "📥 Checkout project sources"
        uses: actions/checkout@v5

      - name: "☕ 🛠️ Set up JDK 21"
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: "🐘 🛠️ Setup Gradle"
        uses: gradle/actions/setup-gradle@v5

      - name: "🐳 🔓 Log in to the Container registry"
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐳 📦 📥 Pull Docker image to run acceptance tests"
        run: |
          docker pull ${{ inputs.docker-registry }}/${{ inputs.github-repository }}/${{ inputs.docker-image }}:sha-${{ github.sha }}
          docker tag ${{ inputs.docker-registry }}/${{ inputs.github-repository }}/${{ inputs.docker-image }}:sha-${{ github.sha }} ${{ inputs.docker-image }}:latest

      - name: "🐘 📦 🧪 Run acceptance tests"
        id: acceptance
        working-directory: ${{ inputs.working-directory }}
        run: |
          make acceptance | tee acceptance.log
          result_code=${PIPESTATUS[0]}
          # Retrieve the cucumber report URL from acceptance execution logs, remove the color characters, extract the URL only
          echo "report_url=$(sed '/View your Cucumber Report at:/{n; p}' acceptance.log | sed -e 's/\x1b\[[0-9;]*m//g' | grep -o 'http[s]\?://[^ ]\+' | head -1)" >> $GITHUB_OUTPUT
          exit $result_code
        timeout-minutes: 5

      - name: "🧪 📦 📒 Publish acceptance tests Report"
        uses: actions/github-script@v8
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const { REPORTS_BASE_URL, GCS_REPORTS_PATH } = process.env
            const output = `
            #### Acceptance tests \`${{ steps.acceptance.outcome }}\`
            ${{ steps.acceptance.outputs.report_url }}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  release:
    name: '🚀 Release'
    runs-on: [ ubuntu-latest ]
    needs: [ acceptance ]
    if: ${{ ! failure() && ! cancelled() && github.ref == 'refs/heads/main' }}
    permissions:
      id-token: write
      packages: write
      contents: write
    steps:
      - name: "📥 Checkout project sources"
        uses: actions/checkout@v5
        with:
          fetch-depth: "0"

      - name: "🐳 🔓 Log in to the Container registry"
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker-registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐳 📦 📥 Pull Docker image to release"
        run: |
          docker pull ${{ inputs.docker-registry }}/${{ inputs.github-repository }}/${{ inputs.docker-image }}:sha-${{ github.sha }}

      - name: "🏷 📦 Define tags based on semantic versioning"
        id: svu
        run: |
          set +e
          mkdir -p target_dir
          wget -q https://github.com/caarlos0/svu/releases/download/v3.1.0/svu_3.1.0_linux_amd64.tar.gz -P target_dir
          cd target_dir || exit
          tar -xzvf svu_3.1.0_linux_amd64.tar.gz
          chmod +x svu
          sudo mv svu /usr/local/bin/
          cd .. || exit
          rm -rf target_dir

          echo "current_tag=$(svu current --tag.prefix="${{ inputs.app-name }}-v" --tag.pattern="${{ inputs.app-name }}-v[0-9]*.[0-9]*.[0-9]*-build-*")" >> $GITHUB_OUTPUT
          echo "next_tag=$(svu next --tag.prefix="${{ inputs.app-name }}-v" --tag.pattern="${{ inputs.app-name }}-v[0-9]*.[0-9]*.[0-9]*" --log.directory="${{ inputs.app-name }}")" >> $GITHUB_OUTPUT
          echo "next_build_tag=$(svu next --tag.prefix="${{ inputs.app-name }}-v" --tag.pattern="${{ inputs.app-name }}-v[0-9]*.[0-9]*.[0-9]*" --log.directory="${{ inputs.app-name }}")-build-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: "🏷 🌵 Tag Git branch"
        run: |
          git config --global --add safe.directory "$(realpath "${{ inputs.working-directory }}")"
          git config --global user.email "username@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global http.sslVerify true

          git -C ${{ inputs.working-directory }} tag -fa ${{ steps.svu.outputs.next_tag }} ${{ github.sha }} -m "${TAG_MSG}"
          git -C ${{ inputs.working-directory }} push --force origin ${{ steps.svu.outputs.next_tag }} --push-option "ci.skip"

          git -C ${{ inputs.working-directory }} tag -fa ${{ steps.svu.outputs.next_build_tag }} ${{ github.sha }} -m "${TAG_MSG}"
          git -C ${{ inputs.working-directory }} push origin ${{ steps.svu.outputs.next_build_tag }} --push-option "ci.skip"

      - name: "🏷 🐳 📦 Push Docker image with release tag"
        run: |
          docker tag ${{ env.distant-image }}:sha-${{ github.sha }} ${{ env.distant-image }}:latest
          docker tag ${{ env.distant-image }}:sha-${{ github.sha }} ${{ env.distant-image }}:${{ steps.svu.outputs.next_build_tag }}
          docker push ${{ env.distant-image }}:latest
          docker push ${{ env.distant-image }}:${{ steps.svu.outputs.next_build_tag }}
        env:
          distant-image: ${{ inputs.docker-registry }}/${{ inputs.github-repository }}/${{ inputs.docker-image }}

      - name: "📦 🚀 Create Github release"
        run: |
          gh release create ${{ steps.svu.outputs.next_build_tag }} \
            --generate-notes \
            --latest \
            --verify-tag=true \
            --target=main \
            --notes-start-tag=${{ steps.svu.outputs.current_tag }} \
            --prerelease=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
