buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'au.com.dius.pact.provider:gradle:4.6.17'
	}
}

plugins {
	id 'java'
	id 'net.ltgt.errorprone' version '4.3.0'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'au.com.dius.pact' version '4.6.17'
	id 'io.miret.etienne.sass' version '1.5.2'
}

group = 'org.adhuc.library'
version = '1'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

configurations {
	scss { transitive = false }
}

ext {
	set('springCloudVersion', "2025.0.0")
	bootstrapVersion = '5.3.8'
	okhttp3Version = '5.1.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	implementation 'org.jspecify:jspecify:1.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework:spring-webflux'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'io.micrometer:micrometer-tracing'
	implementation 'io.micrometer:context-propagation'

	runtimeOnly "org.webjars.npm:bootstrap:${bootstrapVersion}"
	runtimeOnly 'org.webjars.npm:font-awesome:4.7.0'
	runtimeOnly 'io.micrometer:micrometer-tracing-bridge-otel'
	runtimeOnly 'io.opentelemetry:opentelemetry-exporter-zipkin'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "com.squareup.okhttp3:okhttp:${okhttp3Version}"
	testImplementation "com.squareup.okhttp3:mockwebserver3-junit5:${okhttp3Version}"
	testImplementation 'au.com.dius.pact.consumer:junit5:4.6.17'
	testImplementation 'org.aspectj:aspectjweaver:1.9.24'

	errorprone 'com.google.errorprone:error_prone_core:2.42.0'
	errorprone 'com.uber.nullaway:nullaway:0.12.10'

	scss 'org.webjars.npm:bootstrap:5.3.8'
}

task extractBootstrap(type: Copy) {
	from zipTree(configurations.scss.singleFile).matching {
		include "META-INF/resources/webjars/bootstrap/${bootstrapVersion}/scss/**/*.scss"
	}
	into 'build/bootstrap'
}

task copyBootstrap(type: Copy) {
	dependsOn extractBootstrap
	from ("build/bootstrap/META-INF/resources/webjars/bootstrap/${bootstrapVersion}/scss") {
		include '**/*.scss'
	}
	into "${projectDir}/src/main/sass"
}

compileSass {
	dependsOn copyBootstrap
	sourceDir = project.file("${projectDir}/src/main/sass")
	outputDir = project.file("${projectDir}/src/main/resources/static/resources/css")
}

processResources {
	dependsOn compileSass
}

tasks.withType(JavaCompile).configureEach {
	options.errorprone {
		disableAllChecks = true
		option("NullAway:OnlyNullMarked", "true")
		error("NullAway")
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task getGitHash(type: Exec) {
	commandLine 'git', 'rev-parse', '--short', 'HEAD'

	ext.output = {
		return standardOutput.toString().trim()
	}
}

task getGitBranch(type: Exec) {
	commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'

	ext.output = {
		return standardOutput.toString().trim()
	}
}

pact {
	publish {
		pactDirectory = "${projectDir}/build/pacts"
		pactBrokerUrl = 'http://localhost:9292/'
		consumerBranch = getGitBranch.output()
		consumerVersion = getGitHash.output()
	}
}
